const std = @import("std");
const gitweb = @import("gitweb.zig");
const main = @import("main.zig");

pub fn writeHeader(ctx: *gitweb.Context, writer: anytype) !void {
    if (ctx.cfg.noheader) {
        return;
    }

    try writer.writeAll("<!DOCTYPE html>\n");
    try writer.writeAll("<html lang='en'>\n");
    try writer.writeAll("<head>\n");
    try writer.print("<meta charset='{s}'/>\n", .{ctx.page.charset});
    try writer.print("<title>{s}</title>\n", .{ctx.page.title});
    try writer.print("<link rel='stylesheet' type='text/css' href='{s}'/>\n", .{ctx.cfg.css});

    if (ctx.cfg.favicon.len > 0) {
        try writer.print("<link rel='shortcut icon' href='{s}'/>\n", .{ctx.cfg.favicon});
    }

    if (ctx.cfg.head_include) |include| {
        try includeFile(writer, include);
    }

    try writer.writeAll("</head>\n");
    try writer.writeAll("<body>\n");

    // Header section
    try writer.writeAll("<div id='gitweb'>\n");
    try writer.writeAll("<table id='header'>\n");
    try writer.writeAll("<tr>\n");
    try writer.writeAll("<td class='logo' rowspan='2'>");
    try writer.print("<a href='{s}'><img src='{s}' alt='gitweb logo'/></a>", .{ ctx.cfg.logo_link, ctx.cfg.logo });
    try writer.writeAll("</td>\n");
    try writer.print("<td class='main'><a href='{s}'>{s}</a></td>", .{ ctx.cfg.virtual_root, ctx.cfg.root_title });
    try writer.writeAll("</tr>\n");
    try writer.writeAll("<tr><td class='sub'>");
    try writer.writeAll(ctx.cfg.root_desc);
    try writer.writeAll("</td></tr>\n");
    try writer.writeAll("</table>\n");

    // Navigation tabs
    if (ctx.repo) |repo| {
        try writeRepoTabs(ctx, repo, writer);
    }

    try writer.writeAll("<div class='content'>\n");
}

pub fn writeFooter(ctx: *gitweb.Context, writer: anytype) !void {
    if (ctx.cfg.noheader) {
        return;
    }

    try writer.writeAll("</div> <!-- class=content -->\n");

    if (ctx.cfg.footer) |footer| {
        try writer.writeAll("<div class='footer'>");
        try includeFile(writer, footer);
        try writer.writeAll("</div>\n");
    } else {
        try writer.writeAll("<div class='footer'>generated by ");
        try writer.print("<a href='https://github.com/yourusername/zig-gitweb'>zig-gitweb {s}</a>", .{main.version});
        try writer.writeAll(" at ");
        const timestamp = std.time.timestamp();
        try writer.print("{d}", .{timestamp});
        try writer.writeAll("</div>\n");
    }

    try writer.writeAll("</div> <!-- id=gitweb -->\n");
    try writer.writeAll("</body>\n");
    try writer.writeAll("</html>\n");
}

fn writeRepoTabs(ctx: *gitweb.Context, repo: *gitweb.Repo, writer: anytype) !void {
    try writer.writeAll("<table class='tabs'><tr><td>\n");

    // Summary tab
    try writeTab(writer, "summary", "summary", ctx.cmd);

    // Refs tab
    try writeTab(writer, "refs", "refs", ctx.cmd);

    // Log tab
    try writeTab(writer, "log", "log", ctx.cmd);

    // Tree tab
    try writeTab(writer, "tree", "tree", ctx.cmd);

    // Commit tab
    try writeTab(writer, "commit", "commit", ctx.cmd);

    // Diff tab
    try writeTab(writer, "diff", "diff", ctx.cmd);

    // Stats tab
    if (repo.max_stats != null) {
        try writeTab(writer, "stats", "stats", ctx.cmd);
    }

    try writer.writeAll("</td></tr></table>\n");
}

fn writeTab(writer: anytype, name: []const u8, cmd: []const u8, current_cmd: []const u8) !void {
    if (std.mem.eql(u8, cmd, current_cmd)) {
        try writer.print("<a class='active' href='?cmd={s}'>{s}</a>", .{ cmd, name });
    } else {
        try writer.print("<a href='?cmd={s}'>{s}</a>", .{ cmd, name });
    }
}

fn includeFile(writer: anytype, path: []const u8) !void {
    const file = std.fs.openFileAbsolute(path, .{}) catch {
        return; // Silently fail if include file doesn't exist
    };
    defer file.close();

    const content = file.readToEndAlloc(std.heap.page_allocator, std.math.maxInt(usize)) catch {
        return;
    };
    defer std.heap.page_allocator.free(content);

    try writer.writeAll(content);
}

pub fn htmlEscape(writer: anytype, text: []const u8) !void {
    for (text) |char| {
        switch (char) {
            '<' => try writer.writeAll("&lt;"),
            '>' => try writer.writeAll("&gt;"),
            '&' => try writer.writeAll("&amp;"),
            '"' => try writer.writeAll("&quot;"),
            '\'' => try writer.writeAll("&#39;"),
            else => try writer.writeByte(char),
        }
    }
}

pub fn urlEncode(writer: anytype, text: []const u8) !void {
    for (text) |char| {
        if (std.ascii.isAlphanumeric(char) or char == '-' or char == '_' or char == '.' or char == '~') {
            try writer.writeByte(char);
        } else {
            try writer.print("%{X:0>2}", .{char});
        }
    }
}

pub fn writeLink(writer: anytype, url: []const u8, text: []const u8) !void {
    try writer.print("<a href='{s}'>", .{url});
    try htmlEscape(writer, text);
    try writer.writeAll("</a>");
}

pub fn writeTableHeader(writer: anytype, headers: []const []const u8) !void {
    try writer.writeAll("<table class='list'>\n");
    try writer.writeAll("<tr class='nohover'>");
    for (headers) |header| {
        try writer.print("<th>{s}</th>", .{header});
    }
    try writer.writeAll("</tr>\n");
}

pub fn writeTableRow(writer: anytype, class: ?[]const u8) !void {
    if (class) |c| {
        try writer.print("<tr class='{s}'>", .{c});
    } else {
        try writer.writeAll("<tr>");
    }
}

pub fn writeTableCell(writer: anytype, class: ?[]const u8, content: []const u8) !void {
    if (class) |c| {
        try writer.print("<td class='{s}'>", .{c});
    } else {
        try writer.writeAll("<td>");
    }
    try htmlEscape(writer, content);
    try writer.writeAll("</td>");
}

pub fn writeTableFooter(writer: anytype) !void {
    try writer.writeAll("</table>\n");
}
